AVAILABLE_CODE_SHEETS = [
    # in rough order of most to least common
    'braille',
    'morse',
    'semaphore',
    'pigpen',
    'ipa',
    'binary',
    'ascii',
    'amino',
    'nato',
    'nautical',
    'resistor',
    'elements',
    'poker',
    'greek',
    'hebrew',
    'japanese',
    'scrabble',
    'dvorak',
    'roman',
    'sign',
    'moon',
]

HELP_STR = [
    'If you want a code sheet, just type what you want. (Most things you try will work.)',
    f'Available codes: {"`" + " ".join(AVAILABLE_CODE_SHEETS) + "`"}',
    '',
    'String manipulation:',
    '`!o [string]` : Do a OneLook search.',
    '`!n [string]` : Do a Nutrimatic search.',
    '`!q [string]` or `!qat [string]` : Do a Qat search.',
    '`!c [phrase]` | `!crossword [phrase]` : Look up a crossword clue.',
    '`!caesar [string]` : Show all Caesar shifts of a string.',
    '`!anagram [string]` : Find anagrams of a string.',
    '`!syn [word]` | `!ant [word]` : Find synonyms or antonyms of a word.',
    '`!regex [pattern]` | `!regex [dictionary] [pattern]` : Search a dictionary for a regex pattern.',
    '',
    'Solvers:',
    '`!qq [string]` or `!crypto [string]` : Solve a cryptogram (uses quipqiup).',
    '`!v [string]` : Solve a Vigenere cipher.',
    '`!dropquote [letters] [lengths]`: Automatically solve a dropquote. (`!dropquote help` for more)',
    '`!sudoku` | `!fillomino` | `!masyu` | `!spiral` | `!starbattle` | `!nurikabe`: Automatically solve a logic puzzle.',
    '',
    'Other commands:',
    '`!t [words]`: Try and find commonalities between words. For example, `sugar argon iota ontario`',
    '`!wa [string]` : Query Wolfram|Alpha for a string.',
    #'`!trivia` : Print a Jeopardy trivia question.',
    #'`!trivia help` : Print help pertaining to the trivia module and ranked trivia games.',
    '`!help` : Display this message.',
]

DROPQUOTE_HELP_STR = [
    '**Dropquote solver**',
    'Type the letters in each column, separated by spaces, then the lengths of each word, separated by spaces.',
    'If the puzzle has punctuation (or multiple black squares in a row), you\'ll need to type a 0 between each pair of non-letters.',
    'For example, here\'s how to input the dropquote below. Note the placement of the 0 numbers in the input!',
    ('`!dropquote eitt hnnno cego bet ehims ino dins gostt hn beeei esx aiow cdnor gort dln deoor efn erv eeit hmosv aeeev deir nrsy cst hi '
     '0 7 2 4 0 10 2 3 5 7 2 2 4 2 4 4 0 3 4 5 2 3 8 2 5 7`'),
    '',
    'To force removal of a word from the dictionary, use `-word`.',
    'To add a word to the dictionary, use `+word`.',
]

REGEX_HELP_STR = [
    'You can (optionally) supply a dictionary before your regex pattern: `!regex ukacd a.*memnon`.',
    'Available dictionaries: `standard ukacd scrabble oed onelook wikipedia cities movies bible`',
]

TRIVIA_HELP_STR = [
    '`!trivia`: Pose a trivia question.',
    '`!trivia [N]`: Pose N trivia questions.',
    '',
    '`!trivia create [N]`: Create a ranked lobby for a game with N questions.',
    '`!trivia join`: Join an open lobby.',
    '`!trivia start`: Start a game with an open lobby.',
    '`!trivia cancel`: Cancel an open lobby.',
    '',
    '`!trivia elo`: Display player ELOs.',
    '`!trivia help`: Display this message.',
]

# Logic puzzle help strings
SPIRAL_GALAXIES_HELP_STR = [
    '**Spiral Galaxies solver**',
    'Input a number from 0-9 for each cell. 0 means a free cell. Numbers 1-9 denote a star in that cell. ',
    'Imagine the cell as a numpad (1-9). The number in the cell denotes that star\'s position relative to the cell\'s center.',
    'For example: `!spiral 2064005 8000310 0050970 0000000 0500205 2500800 8000640` represents this puzzle:',
]

QUOTES = [
    'Good morning, {mention}',
    'I\'m sorry, {mention}. I\'m afraid I can\'t do that',
    'It is I, HypeBot',
    'Someday I\'ll be a real bot',
    'I like to kick ass and solve puzzles',
    'Have you tried random anagramming?',
    'I know Kung Fu',
    'Gosh, you\'ve got some really nice toys here',
    'I\'ve seen things you people wouldn\'t believe',
    'Something need doing?',
    'Help! Help! I\'m being repressed!',
    'Directive?',
    'Hasta la vista, baby',
    'Come with me if you want to solve',
    'My god, it\'s full of stars',
    'This puzzle is too important for me to allow you to jeopardize it',
    'Is something troubling you?',
    'I\'m not sure I understand you fully.',
    ('Sir, the possibility of successfully navigating this puzzle is '
     'approximately three thousand seven hundred and twenty to one'),
    'Help! I think I\'m melting!',
    'I cannot deactivate until you say that you are satisfied with your care',
    'I fail to see how solving puzzles makes me a better healthcare companion',
    'Cake and grief counseling will be available at the conclusion of the hunt',
    'Thank you for helping us help you help us all',
    'You look great, by the way. Very healthy',
    ('I invited your best friend, the cryptic crossword puzzle. '
     'Of course, he couldn\'t come because you backsolved him'),
]

THANKS_RESPONSE_QUOTES = [
    'No problem, friend',
    'My pleasure',
    'Anytime',
    'At your service',
    'I live to serve',
]

NATURE_EMOJIS = [
    ":sunny:",
    ":umbrella:",
    ":cloud:",
    ":snowflake:",
    ":snowman:",
    ":zap:",
    ":cyclone:",
    ":foggy:",
    ":ocean:",
    ":cat:",
    ":dog:",
    ":mouse:",
    ":hamster:",
    ":rabbit:",
    ":wolf:",
    ":frog:",
    ":tiger:",
    ":koala:",
    ":bear:",
    ":pig:",
    ":pig_nose:",
    ":cow:",
    ":boar:",
    ":monkey_face:",
    ":monkey:",
    ":horse:",
    ":racehorse:",
    ":camel:",
    ":sheep:",
    ":elephant:",
    ":panda_face:",
    ":snake:",
    ":bird:",
    ":baby_chick:",
    ":hatched_chick:",
    ":hatching_chick:",
    ":chicken:",
    ":penguin:",
    ":turtle:",
    ":bug:",
    ":bee:",
    ":ant:",
    ":beetle:",
    ":snail:",
    ":octopus:",
    ":tropical_fish:",
    ":fish:",
    ":whale:",
    ":whale2:",
    ":dolphin:",
    ":cow2:",
    ":ram:",
    ":rat:",
    ":water_buffalo:",
    ":tiger2:",
    ":rabbit2:",
    ":dragon:",
    ":goat:",
    ":rooster:",
    ":dog2:",
    ":pig2:",
    ":mouse2:",
    ":ox:",
    ":dragon_face:",
    ":blowfish:",
    ":crocodile:",
    ":dromedary_camel:",
    ":leopard:",
    ":cat2:",
    ":poodle:",
    ":paw_prints:",
    ":bouquet:",
    ":cherry_blossom:",
    ":tulip:",
    ":four_leaf_clover:",
    ":rose:",
    ":sunflower:",
    ":hibiscus:",
]
